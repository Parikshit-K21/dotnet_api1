SELECT
    b.docunumb,

    -- New Users (App Downloaded On/After Meet Date)
    COUNT(DISTINCT CASE
        WHEN e.tncDttme IS NOT NULL AND e.tncDttme >= a.meetdate THEN d.inflCode
        ELSE NULL
    END) AS NewUsersAppDownloadedOnOrAfterMeet,

    -- Started Scanning (First Token Scan After Meet) - for New Users
    COUNT(DISTINCT CASE
        WHEN e.tncDttme IS NOT NULL AND e.tncDttme >= a.meetdate -- Is a New User (App Downloaded On/After Meet Date)
        AND ScanSummary.FirstScanDate IS NOT NULL AND ScanSummary.FirstScanDate >= a.meetdate THEN d.inflCode
        ELSE NULL
    END) AS StartedScanningAfterMeet,

    -- Existing Users (App Downloaded Before Meet Date)
    COUNT(DISTINCT CASE
        WHEN e.tncDttme IS NOT NULL AND e.tncDttme < a.meetdate THEN d.inflCode
        ELSE NULL
    END) AS ExistingUsersAppDownloadedBeforeMeet,

    -- Existing Regular Scanners (Scan Before Meet Date) - for Existing Users
    COUNT(DISTINCT CASE
        WHEN e.tncDttme IS NOT NULL AND e.tncDttme < a.meetdate -- Is an Existing User (App Downloaded Before Meet Date)
        AND ScanSummary.FirstScanDate IS NOT NULL AND ScanSummary.FirstScanDate < a.meetdate THEN d.inflCode
        ELSE NULL
    END) AS ExistingRegularScanners,

    -- Dormant Users (No Scans) - for Existing Users
    -- IMPORTANT: This metric will likely be INCORRECT (often 0) in this single query.
    -- Due to the implicit INNER JOIN to ScanSummary below, this condition will almost never be met.
    -- An influencer with *no* scan data will be filtered out *before* this CASE statement can evaluate.
    COUNT(DISTINCT CASE
        WHEN e.tncDttme IS NOT NULL AND e.tncDttme < a.meetdate -- Is an Existing User
        AND NOT EXISTS (SELECT 1 FROM lytCodeHsty LCH_NE WITH (NOLOCK) WHERE LCH_NE.inflCode = d.inflCode)
        THEN d.inflCode
        ELSE NULL
    END) AS DormantUsersNoScans,

    -- Dormant to Active (First Scan After Meet) - for Existing Users
    COUNT(DISTINCT CASE
        WHEN e.tncDttme IS NOT NULL AND e.tncDttme < a.meetdate -- Is an Existing User (App Downloaded Before Meet Date)
        AND ScanSummary.FirstScanDate IS NOT NULL AND ScanSummary.FirstScanDate >= a.meetdate THEN d.inflCode
        ELSE NULL
    END) AS DormantToActiveFirstScanAfterMeet
FROM
    catactpresl a WITH (NOLOCK),
    catactpresldtl b WITH (NOLOCK),
    ctminfluncr d WITH (NOLOCK),
    lymInfluncr e WITH (NOLOCK),
    -- Subquery to get the first and last scan dates for each influencer who has scanned
    (SELECT inflCode, MIN(createDt) AS FirstScanDate, MAX(createDt) AS LastScanDate FROM lytCodeHsty WITH (NOLOCK) GROUP BY inflCode) ScanSummary
WHERE
    a.docunumb = b.docunumb
    AND b.dsrrem09 = d.mobileNo
    AND e.inflCode = d.inflCode
    AND d.inflCode = ScanSummary.inflCode -- This is the implicit INNER JOIN to scan data
    AND a.caaactty = '03'
    AND b.attntype = 'i'
    AND b.dsrrem09 IS NOT NULL
GROUP BY
    b.docunumb;